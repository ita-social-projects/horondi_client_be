trigger:
  - development
  - master

pr: none

resources:
- repo: self

variables:
  vmImageName: 'ubuntu-latest'

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: Build
    displayName: BuildandDeploy
    condition: in(variables['Build.Reason'], 'IndividualCI', 'Manual')  
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DownloadSecureFile@1
        name: envprod
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          secureFile: 'env-back'
      - task: Bash@3
        name: prodfile
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          targetType: 'inline'
          script: 'mv $(envprod.secureFilePath) .env'
      - task: DownloadSecureFile@1
        name: envdev
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          secureFile: 'env-back-staging'
      - task: Bash@3
        name: devfile
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          targetType: 'inline'
          script: 'mv $(envdev.secureFilePath) .env'
      
      - task: Docker@0
        name: stagingBuild
        displayName: 'Build an image'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'Horondi-Admin-Service'
          azureContainerRegistry: '{"loginServer":"horondistaging.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/HorondiStaging"}'
          action: 'Build an image'
          dockerFile: '**/Dockerfile'
          buildArguments: 'password=$(pass)'
          imageName: '$(Build.Repository.Name):$(Build.BuildId)'
      
      - task: Docker@0
        name: deployedStaging
        displayName: 'Push an image'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'Horondi-Admin-Service'
          azureContainerRegistry: '{"loginServer":"horondistaging.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/HorondiStaging"}'
          action: 'Push an image'
          imageName: '$(Build.Repository.Name):$(Build.BuildId)'
      
      - task: Docker@0
        name: productionBuild
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryConnection: 'Horondi-Registry'
          action: 'Build an image'
          dockerFile: '**/Dockerfile'
          imageName: '$(Build.Repository.Name):$(Build.BuildId)'
      - task: Docker@0
        name: deployedProduction
        displayName: 'Push an image'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryConnection: 'Horondi-Registry'
          action: 'Push an image'
          imageName: '$(Build.Repository.Name):$(Build.BuildId)'

# - stage: Deploy
#   displayName: Deploy image to app service
#   jobs:
#     - job: Deploy
#       pool:
#         vmImage: $(vmImageName)
#       steps:
#         # - task: AzureRmWebAppDeployment@4
#         #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
#         #   inputs:
#         #     ConnectionType: 'AzureRM'
#         #     azureSubscription: 'Horondi-Admin-Service'
#         #     appType: 'webAppContainer'
#         #     WebAppName: 'horondi-back-staging'
#         #     DockerNamespace: 'horondi.azurecr.io'
#         #     DockerRepository: 'horondi_client_be'
#         #     DockerImageTag: '$(Build.BuildId)'
#         - task: AzureRmWebAppDeployment@4
#           condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
#           inputs:
#             ConnectionType: 'AzureRM'
#             azureSubscription: 'Horondi-Admin-Service'
#             appType: 'webAppContainer'
#             WebAppName: 'horondi-back-staging'
#             DockerNamespace: 'horondistaging.azurecr.io'
#             DockerRepository: 'horondi_client_be'
#             DockerImageTag: '$(Build.BuildId)'

#         - task: AzureWebAppContainer@1
#           condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#           inputs:
#             azureSubscription: 'Horondi-Admin-Service'
#             appName: 'horondi-back'
#             containers: 'horondi.azurecr.io/ita-social-projects/horondi_client_be:$(Build.BuildId)'
